{"ast":null,"code":"var _jsxFileName = \"/Users/falcacer/Workspace/Proyectos/playroom/SzicomProject/client/src/pages/QuestionDetails.tsx\",\n  _s = $RefreshSig$();\nimport QuestionItem from \"../Components/QuestionItem\";\nimport { json, useLoaderData } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Answers = props => {\n  _s();\n  const data = useLoaderData();\n  const question = data[0];\n  const answers = data[1];\n  return (\n    /*#__PURE__*/\n    // <div>\n    //   <QuestionItem event={question} />\n    //   <ul></ul>\n    // <div/>\n    _jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(QuestionItem, {\n        event: question\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 5\n    }, this)\n  );\n};\n_s(Answers, \"v5hK2q5+812nORSCtfM3AShO9pc=\", false, function () {\n  return [useLoaderData];\n});\n_c = Answers;\nexport default Answers;\nexport async function loader(_ref) {\n  let {\n    req,\n    params\n  } = _ref;\n  const id = params.questionId;\n  const response = await fetch(`http://localhost:8080/questions/${id}`);\n  if (!response.ok) {\n    throw json({\n      message: \"Could not fetch answers for selected question.\"\n    }, {\n      status: 500\n    });\n  } else {\n    return response;\n  }\n}\nvar _c;\n$RefreshReg$(_c, \"Answers\");","map":{"version":3,"names":["QuestionItem","json","useLoaderData","jsxDEV","_jsxDEV","Answers","props","_s","data","question","answers","children","event","fileName","_jsxFileName","lineNumber","columnNumber","_c","loader","_ref","req","params","id","questionId","response","fetch","ok","message","status","$RefreshReg$"],"sources":["/Users/falcacer/Workspace/Proyectos/playroom/SzicomProject/client/src/pages/QuestionDetails.tsx"],"sourcesContent":["import AnswersList from \"../Components/AnswersList\";\nimport QuestionItem from \"../Components/QuestionItem\";\nimport { json, useLoaderData } from \"react-router-dom\";\n\ntype Props = {};\n\nconst Answers = (props: Props) => {\n  const data: any = useLoaderData();\n  const question = data[0];\n  const answers = data[1];\n\n  return (\n    // <div>\n    //   <QuestionItem event={question} />\n    //   <ul></ul>\n    // <div/>\n    <div>\n      <QuestionItem event={question}/>\n    </div>\n  );\n};\n\nexport default Answers;\n\nexport async function loader({ req, params }: any) {\n  const id = params.questionId;\n\n  const response = await fetch(`http://localhost:8080/questions/${id}`);\n\n  if (!response.ok) {\n    throw json(\n      { message: \"Could not fetch answers for selected question.\" },\n      { status: 500 }\n    );\n  } else {\n    return response;\n  }\n}\n"],"mappings":";;AACA,OAAOA,YAAY,MAAM,4BAA4B;AACrD,SAASC,IAAI,EAAEC,aAAa,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAIvD,MAAMC,OAAO,GAAIC,KAAY,IAAK;EAAAC,EAAA;EAChC,MAAMC,IAAS,GAAGN,aAAa,CAAC,CAAC;EACjC,MAAMO,QAAQ,GAAGD,IAAI,CAAC,CAAC,CAAC;EACxB,MAAME,OAAO,GAAGF,IAAI,CAAC,CAAC,CAAC;EAEvB;IAAA;IACE;IACA;IACA;IACA;IACAJ,OAAA;MAAAO,QAAA,eACEP,OAAA,CAACJ,YAAY;QAACY,KAAK,EAAEH;MAAS;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC7B;EAAC;AAEV,CAAC;AAACT,EAAA,CAdIF,OAAO;EAAA,QACOH,aAAa;AAAA;AAAAe,EAAA,GAD3BZ,OAAO;AAgBb,eAAeA,OAAO;AAEtB,OAAO,eAAea,MAAMA,CAAAC,IAAA,EAAuB;EAAA,IAAtB;IAAEC,GAAG;IAAEC;EAAY,CAAC,GAAAF,IAAA;EAC/C,MAAMG,EAAE,GAAGD,MAAM,CAACE,UAAU;EAE5B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,mCAAkCH,EAAG,EAAC,CAAC;EAErE,IAAI,CAACE,QAAQ,CAACE,EAAE,EAAE;IAChB,MAAMzB,IAAI,CACR;MAAE0B,OAAO,EAAE;IAAiD,CAAC,EAC7D;MAAEC,MAAM,EAAE;IAAI,CAChB,CAAC;EACH,CAAC,MAAM;IACL,OAAOJ,QAAQ;EACjB;AACF;AAAC,IAAAP,EAAA;AAAAY,YAAA,CAAAZ,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}