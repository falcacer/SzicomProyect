{"ast":null,"code":"var _jsxFileName = \"/Users/falcacer/Workspace/Proyectos/playroom/SzicomProject/client/src/pages/Questions.tsx\",\n  _s = $RefreshSig$();\nimport QuestionsList from \"../Components/QuestionsList\";\nimport { useLoaderData, json } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Questions() {\n  _s();\n  const data = useLoaderData();\n  console.log(data);\n  // const questions = data.questions;\n\n  if (data.isError) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: data.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(QuestionsList, {\n      events: data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n_s(Questions, \"v5hK2q5+812nORSCtfM3AShO9pc=\", false, function () {\n  return [useLoaderData];\n});\n_c = Questions;\nexport default Questions;\nexport async function loader() {\n  const response = await fetch(\"http://localhost:8080/questions\");\n  if (!response.ok) {\n    return json({\n      message: \"Could not fetch events.\"\n    }, {\n      status: 500\n    });\n  } else {\n    return response;\n  }\n}\nvar _c;\n$RefreshReg$(_c, \"Questions\");","map":{"version":3,"names":["QuestionsList","useLoaderData","json","jsxDEV","_jsxDEV","Fragment","_Fragment","Questions","_s","data","console","log","isError","children","message","fileName","_jsxFileName","lineNumber","columnNumber","events","_c","loader","response","fetch","ok","status","$RefreshReg$"],"sources":["/Users/falcacer/Workspace/Proyectos/playroom/SzicomProject/client/src/pages/Questions.tsx"],"sourcesContent":["import QuestionsList from \"../Components/QuestionsList\";\nimport { useLoaderData, json } from \"react-router-dom\";\n\nfunction Questions() {\n  const data: any = useLoaderData();\n  console.log(data)\n  // const questions = data.questions;\n\n  if (data.isError) {\n    return <p>{data.message}</p>;\n  }\n\n  return (\n    <>\n      <QuestionsList events={data} />\n    </>\n  );\n}\n\nexport default Questions;\n\nexport async function loader() {\n  const response = await fetch(\"http://localhost:8080/questions\");\n\n  if (!response.ok) {\n    return json({ message: \"Could not fetch events.\" }, { status: 500 });\n  } else {\n    return response;\n  }\n}\n"],"mappings":";;AAAA,OAAOA,aAAa,MAAM,6BAA6B;AACvD,SAASC,aAAa,EAAEC,IAAI,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAEvD,SAASC,SAASA,CAAA,EAAG;EAAAC,EAAA;EACnB,MAAMC,IAAS,GAAGR,aAAa,CAAC,CAAC;EACjCS,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;EACjB;;EAEA,IAAIA,IAAI,CAACG,OAAO,EAAE;IAChB,oBAAOR,OAAA;MAAAS,QAAA,EAAIJ,IAAI,CAACK;IAAO;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAC9B;EAEA,oBACEd,OAAA,CAAAE,SAAA;IAAAO,QAAA,eACET,OAAA,CAACJ,aAAa;MAACmB,MAAM,EAAEV;IAAK;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC,gBAC/B,CAAC;AAEP;AAACV,EAAA,CAdQD,SAAS;EAAA,QACEN,aAAa;AAAA;AAAAmB,EAAA,GADxBb,SAAS;AAgBlB,eAAeA,SAAS;AAExB,OAAO,eAAec,MAAMA,CAAA,EAAG;EAC7B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,iCAAiC,CAAC;EAE/D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IAChB,OAAOtB,IAAI,CAAC;MAAEY,OAAO,EAAE;IAA0B,CAAC,EAAE;MAAEW,MAAM,EAAE;IAAI,CAAC,CAAC;EACtE,CAAC,MAAM;IACL,OAAOH,QAAQ;EACjB;AACF;AAAC,IAAAF,EAAA;AAAAM,YAAA,CAAAN,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}